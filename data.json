{"remove-nth-node-from-end-of-list":{"date":"Sat Jan 20 2024","questiontitle":"remove-nth-node-from-end-of-list","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n\n\n        temp1 = temp2 =  head \n\n        for i in range(n):\n\n            temp2 = temp2.next\n\n        if temp2 == None:\n\n            return head.next\n\n        while(temp2.next):\n\n            temp1 = temp1.next\n\n            temp2 = temp2.next\n\n        temp1.next =  temp1.next.next\n\n        return head\n        ","question":"<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], n = 2\n<strong>Output:</strong> [1,2,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], n = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2], n = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 30</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do this in one pass?</p>\n","platform":"leetcode","difficulty":"Medium","tags":["linked-list","two-pointers"],"qlink":"https://leetcode.com/problems/remove-nth-node-from-end-of-list","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/remove-nth-node-from-end-of-list"},"linked-list-cycle":{"date":"Sat Jan 20 2024","questiontitle":"linked-list-cycle","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n\n        temp1 = temp2 = head\n\n        while(temp2 and temp2.next!=None):\n\n            temp1 = temp1.next\n\n            temp2 = temp2.next.next\n\n            if temp1 == temp2:\n\n                return True\n\n        return False\n\n                ","question":"<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p>\n\n<p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n","platform":"leetcode","difficulty":"Easy","tags":["hash-table","linked-list","two-pointers"],"qlink":"https://leetcode.com/problems/linked-list-cycle","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/linked-list-cycle"},"Count-pairs-with-given-sum":{"date":"Sat Jan 20 2024","questiontitle":"Count-pairs-with-given-sum","code":"#User function Template for python3\n\nclass Solution:\n    def getPairsCount(self, arr, n, k):\n        # code here\n        \n        d1 = {}\n        \n        for i in range(n):\n            \n            try:\n                \n                d1[arr[i]].append(i)\n                \n            except:\n                \n                d1[arr[i]] = [i]\n                \n        count = 0\n            \n        for i in range(n):\n            \n            diff_sum = k-arr[i]\n            \n            if diff_sum in d1.keys():\n                \n                for j in d1[diff_sum]:\n                    \n                    if j>i:\n                        \n                        count+=1\n                        \n        return count\n            \n            \n\n\n\n\n\n#{ \n # Driver Code Starts\n#Initial Template for Python 3\n\nif __name__ == '__main__':\n    tc = int(input())\n    while tc > 0:\n        n, k = list(map(int, input().strip().split()))\n        arr = list(map(int, input().strip().split()))\n        ob = Solution()\n        ans = ob.getPairsCount(arr, n, k)\n        print(ans)\n        tc -= 1\n\n# } Driver Code Ends","question":"<div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array&nbsp;of <strong>N</strong> integers, and an integer&nbsp;<strong>K</strong>, find the number of pairs of elements&nbsp;in the array whose sum is equal to <strong>K</strong>.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 6\narr[] = {1,&nbsp;5,&nbsp;7, 1}\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \narr[0] + arr[1] = 1 + 5 = 6 \nand arr[1] + arr[3] = 5 + 1 = 6.\n</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 2\narr[] = {1, 1, 1, 1}\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>&nbsp;\nEach 1 will produce sum 2 with any 1.</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>getPairsCount()</strong>&nbsp;which takes&nbsp;<strong>arr[],</strong>&nbsp;<strong>n</strong>&nbsp;and&nbsp;<strong>k&nbsp;</strong>as input parameters and returns the number of pairs that have sum K.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)<br>\n<br>\n<strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>5</sup><br>\n1 &lt;= K &lt;= 10<sup>8</sup><br>\n1 &lt;= Arr[i] &lt;= 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n</div>","platform":"leetcode","difficulty":"Easy","tags":["Arrays","Hash","Data Structures"],"qlink":"https://leetcode.com/problems/Count-pairs-with-given-sum","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/Count-pairs-with-given-sum"},"Sum-of-Series":{"date":"Sat Jan 20 2024","questiontitle":"Sum-of-Series","code":"#User function Template for python3\n\nclass Solution:\n\n\t\n\tdef seriesSum(self,n):\n\t    # code here\n\t    \n\t    return n*(n+1)//2\n \n\n\n#{ \n # Driver Code Starts\n                               #Initial Template for Python 3\n\n\n# Driver code \nif __name__ == \"__main__\": \t\t\n    tc=int(input())\n    while tc > 0:\n        n=int(input())\n        ob = Solution()\n        ans = ob.seriesSum(n)\n        print(ans)\n        tc=tc-1\n# } Driver Code Ends","question":"<div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size: 18px;\">Write a program to find the sum of the given series 1+2+3+ . . . . .&nbsp;.(<strong>N</strong> terms)&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> For n = 1, sum will be 1.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> For n = 5, sum will be 15.\n1 + 2 + 3 + 4 + 5 = 15.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br>Complete the function <strong>seriesSum()</strong>&nbsp;which takes&nbsp;single&nbsp;integer&nbsp;<strong>n</strong>,&nbsp;as input parameters&nbsp;and returns an integer denoting the answer.&nbsp;You don't need to print the answer or take inputs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(1)<br><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br>1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n<p>&nbsp;</p></div>","platform":"leetcode","difficulty":"School","tags":["Arrays","Mathematical","Data Structures","Algorithms"],"qlink":"https://leetcode.com/problems/Sum-of-Series","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/Sum-of-Series"},"Find-duplicates-in-an-array":{"date":"Sat Jan 20 2024","questiontitle":"Find-duplicates-in-an-array","code":"class Solution:\n    def duplicates(self, arr, n): \n        # code here\n        if n==1:\n            return [-1]\n        arr.sort()\n        l1=[]\n        i=0\n        while(i<=n-2):\n            status=False\n            if arr[i]==arr[i+1]:\n                status=True\n                while(arr[i]==arr[i+1]):\n                    i+=1\n                    if i==n-1:\n                        break\n            if status:\n                l1.append(arr[i])\n            i+=1\n        if len(l1)==0:\n            return [-1]\n        else:\n            return l1\n                \n                \n            \n\n\n\n\n\n#{ \n # Driver Code Starts\nif(__name__=='__main__'):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().strip().split()))\n        res = Solution().duplicates(arr, n)\n        for i in res:\n            print(i,end=\" \")\n        print()\n\n\n\n# } Driver Code Ends","question":"<div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size: 18px;\">Given an array <strong>a</strong> of size <strong>N</strong> which contains elements from <strong>0</strong> to <strong>N-1</strong>, you need to find all the elements occurring more than once in the given array. Return the answer in ascending order.&nbsp;</span><span style=\"font-size: 18px;\">If no such element is found, return list containing <strong>[-1]</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The extra space is only for the array to be returned. Try and perform all operations within the provided array.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 4\na[] = {0,3,1,2}\n<strong>Output: <br></strong>-1<strong>\nExplanation: <br></strong></span><span style=\"font-size: 14pt;\">There is no repeating element in the array. </span><span style=\"box-sizing: inherit; font-size: 14pt;\">Therefore output is -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\na[] = {2,3,1,2,3}\n<strong>Output: <br></strong>2 3&nbsp;<strong>\nExplanation: <br></strong>2 and 3 occur more than once in the given array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br>Complete the function <strong>duplicates()</strong> which takes array a[] and n as input as parameters and returns a list of elements that occur more than once in the given array in a sorted manner.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br>1 &lt;= N &lt;= 10<sup>5</sup><br>0 &lt;= A[i] &lt;= N-1, for each valid i</span></p></div>","platform":"leetcode","difficulty":"Easy","tags":["Arrays","Data Structures"],"qlink":"https://leetcode.com/problems/Find-duplicates-in-an-array","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/Find-duplicates-in-an-array"},"Equilibrium-Point":{"date":"Sat Jan 20 2024","questiontitle":"Equilibrium-Point","code":"# User function Template for python3\n\nclass Solution:\n    # Complete this function\n    \n    #Function to find equilibrium point in the array.\n    def equilibriumPoint(self,A, N):\n        # Your code here\n        ts=sum(A)\n        ls=0\n        rs=0\n        if N==1:\n            return N\n        for i in range(1,N):\n            ls+=A[i-1]\n            rs=ts-ls-A[i]\n            if ls==rs:\n                return i+1\n        return -1\n\n\n\n\n\n\n#{ \n # Driver Code Starts\n# Initial Template for Python 3\n\nimport math\n\n\ndef main():\n\n    T = int(input())\n\n    while(T > 0):\n\n        N = int(input())\n\n        A = [int(x) for x in input().strip().split()]\n        ob=Solution()\n\n        print(ob.equilibriumPoint(A, N))\n\n        T -= 1\n\n\nif __name__ == \"__main__\":\n    main()\n\n# } Driver Code Ends","question":"<div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size: 18px;\">Given an array<strong> A </strong>of <strong>n</strong> non negative numbers. The task is to find the first <strong>equilibrium point</strong> in an array. Equilibrium point in an array is an index (or position) such that the <strong>sum</strong> of all elements <strong>before </strong>that index is <strong>same</strong> as <strong>sum </strong>of elements <strong>after </strong>it.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:</span></strong><span style=\"font-size: 18px;\"> Return e</span><span style=\"font-size: 18px;\">quilibrium point in 1-based indexing.</span><span style=\"font-size: 18px;\">&nbsp;Return -1 if no such point exists.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>n = 5 \nA[] = {1,3,5,2,2} \n<strong>Output: <br></strong>3<strong> \nExplanation: </strong> \nequilibrium point is at position 3 as sum of elements before it (1+3) = sum of elements after it (2+2).<strong> </strong></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 14pt;\"><strong>Input:\n</strong></span><span style=\"font-size: 18px;\">n = 1\nA[] = {1}\n<strong>Output: <br></strong>1<strong>\nExplanation:\n</strong>Since there's only element hence its only the equilibrium point.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your&nbsp;Task:</strong><br>The task is to complete the function <strong>equilibriumPoint()</strong> which takes the array and n as input parameters and returns the point of equilibrium.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br>1 &lt;= n&nbsp;&lt;= 10<sup>5</sup><br>0 &lt;= A[i] &lt;= 10<sup>9</sup></span></p></div>","platform":"leetcode","difficulty":"Easy","tags":["prefix-sum","Arrays","Data Structures","Algorithms"],"qlink":"https://leetcode.com/problems/Equilibrium-Point","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/Equilibrium-Point"},"remove-linked-list-elements":{"date":"Mon Mar 04 2024","questiontitle":"remove-linked-list-elements","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n\n        slow = head\n\n        fast = head\n\n        while(fast):\n\n            if fast.val == val and slow==fast:\n\n                if slow == head:\n\n                    slow = slow.next\n\n                    fast = slow\n\n                    head = slow\n\n                else:\n\n\n                    slow =  slow.next\n    \n                    fast = slow\n\n            elif fast.val == val:\n\n                slow.next = fast.next\n\n                fast = fast.next\n\n            else:\n\n                slow =  fast\n\n                fast  = fast.next\n\n        return head\n\n            \n\n\n\n        \n        # slow = head\n\n        # fast = head\n\n        # if head == None:\n\n        #     return head\n\n        # while(slow.val==val):\n\n        #     slow =  slow.next\n\n        #     fast = fast.next\n\n        #     head = slow\n\n        #     if slow ==None:\n\n        #         return head\n\n        # fast = fast.next\n\n        # while(fast):\n\n        #     if  fast.val==val:\n\n        #         if fast.next==None:\n\n        #             slow.next = None\n\n        #             return head\n\n        #         slow.next =  fast.next\n\n        #         slow  = slow.next\n\n        #         fast =  slow.next\n\n        #     else:\n\n        #         slow = fast\n\n        #         fast =  fast.next\n\n        # return head\n\n","question":"<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,6,3,4,5,6], val = 6\n<strong>Output:</strong> [1,2,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [], val = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [7,7,7,7], val = 7\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n","platform":"leetcode","difficulty":"Easy","tags":["linked-list","recursion"],"qlink":"https://leetcode.com/problems/remove-linked-list-elements","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/remove-linked-list-elements"},"reverse-linked-list":{"date":"Mon Mar 04 2024","questiontitle":"reverse-linked-list","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        if head == None or head.next == None:\n\n            return head\n\n        t1 =  head\n\n        t2 = head.next\n\n        while(t2):\n\n            t3 = t2.next\n\n            t2.next = t1\n\n            if t1==head:\n\n                t1.next = None\n\n            \n            t1 = t2\n\n            t2 = t3\n\n        return t1\n        ","question":"<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [5,4,3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" style=\"width: 182px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n","platform":"leetcode","difficulty":"Easy","tags":["linked-list","recursion"],"qlink":"https://leetcode.com/problems/reverse-linked-list","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/reverse-linked-list"},"delete-node-in-a-linked-list":{"date":"Mon Mar 04 2024","questiontitle":"delete-node-in-a-linked-list","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n\n        node.val =  node.next.val\n\n        node.next = node.next.next\n        ","question":"<p>There is a singly-linked list <code>head</code> and we want to delete a node <code>node</code> in it.</p>\n\n<p>You are given the node to be deleted <code>node</code>. You will <strong>not be given access</strong> to the first node of <code>head</code>.</p>\n\n<p>All the values of the linked list are <strong>unique</strong>, and it is guaranteed that the given node <code>node</code> is not the last node in the linked list.</p>\n\n<p>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</p>\n\n<ul>\n\t<li>The value of the given node should not exist in the linked list.</li>\n\t<li>The number of nodes in the linked list should decrease by one.</li>\n\t<li>All the values before <code>node</code> should be in the same order.</li>\n\t<li>All the values after <code>node</code> should be in the same order.</li>\n</ul>\n\n<p><strong>Custom testing:</strong></p>\n\n<ul>\n\t<li>For the input, you should provide the entire linked list <code>head</code> and the node to be given <code>node</code>. <code>node</code> should not be the last node of the list and should be an actual node in the list.</li>\n\t<li>We will build the linked list and pass the node to your function.</li>\n\t<li>The output will be the entire list after calling your function.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node1.jpg\" style=\"width: 400px; height: 286px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 5\n<strong>Output:</strong> [4,1,9]\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node2.jpg\" style=\"width: 400px; height: 315px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 1\n<strong>Output:</strong> [4,5,9]\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The value of each node in the list is <strong>unique</strong>.</li>\n\t<li>The <code>node</code> to be deleted is <strong>in the list</strong> and is <strong>not a tail</strong> node.</li>\n</ul>\n","platform":"leetcode","difficulty":"Medium","tags":["linked-list"],"qlink":"https://leetcode.com/problems/delete-node-in-a-linked-list","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/delete-node-in-a-linked-list"},"rotate-list":{"date":"Tue Mar 05 2024","questiontitle":"rotate-list","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n\n        if head==None:\n\n            return head\n\n\n        temp = head\n\n        len=1\n\n        while(temp.next):\n\n            len+=1\n\n            temp = temp.next\n\n        print(len)\n\n        temp.next = head\n\n        k = len-(k%len)\n\n        c = 0\n\n        prev =  head\n\n        curr = head\n\n        while(c!=k):\n\n            prev= curr\n\n            curr = curr.next\n\n            c+=1\n\n        prev.next = None\n\n        return curr\n\n            \n\n        \n\n        \n\n","question":"<p>Given the <code>head</code> of a linked&nbsp;list, rotate the list to the right by <code>k</code> places.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" style=\"width: 450px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [4,5,1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" style=\"width: 305px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2], k = 4\n<strong>Output:</strong> [2,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n","platform":"leetcode","difficulty":"Medium","tags":["linked-list","two-pointers"],"qlink":"https://leetcode.com/problems/rotate-list","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/rotate-list"},"two-sum":{"date":"Sun Mar 24 2024","questiontitle":"two-sum","code":"class Solution:\n    def twoSum(self, nums, target):\n\n        for i in range(len(nums)):\n\n            nums[i] = (nums[i],i)\n\n        nums.sort()\n\n        i = 0\n\n        j = len(nums)-1\n\n        while(True):\n\n            if nums[i][0]+nums[j][0]>target:\n\n                j-=1\n\n            elif nums[i][0]+nums[j][0]<target:\n\n                i+=1\n\n            else:\n\n                return (nums[i][1],nums[j][1])\n\n        \n\n            ","question":"<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?","platform":"leetcode","difficulty":"Easy","tags":["array","hash-table"],"qlink":"https://leetcode.com/problems/two-sum","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/two-sum"},"implement-queue-using-stacks":{"date":"Mon Apr 01 2024","questiontitle":"implement-queue-using-stacks","code":"class MyQueue:\n\n    def __init__(self):\n\n        self.stack1 = list()\n\n        self.stack2 = list()\n\n    def push(self, x: int) -> None:\n\n        while(self.stack1):\n\n            pop =  self.stack1.pop()\n\n            self.stack2.append(pop)\n\n        self.stack2.append(x)\n\n        while(self.stack2):\n\n            pop =  self.stack2.pop()\n\n            self.stack1.append(pop)\n\n\n    def pop(self) -> int:\n\n        return self.stack1.pop()\n\n    def peek(self) -> int:\n        \n        return self.stack1[-1]\n\n    def empty(self) -> bool:\n        \n        return  not(bool(len(self.stack1)))\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()","question":"<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyQueue</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>\n\t<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>\n\t<li><code>int peek()</code> Returns the element at the front of the queue.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 1, 1, false]\n\n<strong>Explanation</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you implement the queue such that each operation is <strong><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>\n","platform":"leetcode","difficulty":"Easy","tags":["stack","design","queue"],"qlink":"https://leetcode.com/problems/implement-queue-using-stacks","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/implement-queue-using-stacks"}}
{"remove-nth-node-from-end-of-list":{"date":"Sat Jan 20 2024","questiontitle":"remove-nth-node-from-end-of-list","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n\n\n        temp1 = temp2 =  head \n\n        for i in range(n):\n\n            temp2 = temp2.next\n\n        if temp2 == None:\n\n            return head.next\n\n        while(temp2.next):\n\n            temp1 = temp1.next\n\n            temp2 = temp2.next\n\n        temp1.next =  temp1.next.next\n\n        return head\n        ","question":"<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], n = 2\n<strong>Output:</strong> [1,2,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], n = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2], n = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 30</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do this in one pass?</p>\n","platform":"leetcode","difficulty":"Medium","tags":["linked-list","two-pointers"],"qlink":"https://leetcode.com/problems/remove-nth-node-from-end-of-list","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/remove-nth-node-from-end-of-list"},"linked-list-cycle":{"date":"Sat Jan 20 2024","questiontitle":"linked-list-cycle","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n\n        temp1 = temp2 = head\n\n        while(temp2 and temp2.next!=None):\n\n            temp1 = temp1.next\n\n            temp2 = temp2.next.next\n\n            if temp1 == temp2:\n\n                return True\n\n        return False\n\n                ","question":"<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p>\n\n<p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n","platform":"leetcode","difficulty":"Easy","tags":["hash-table","linked-list","two-pointers"],"qlink":"https://leetcode.com/problems/linked-list-cycle","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/linked-list-cycle"},"Count-pairs-with-given-sum":{"date":"Sat Jan 20 2024","questiontitle":"Count-pairs-with-given-sum","code":"#User function Template for python3\n\nclass Solution:\n    def getPairsCount(self, arr, n, k):\n        # code here\n        \n        d1 = {}\n        \n        for i in range(n):\n            \n            try:\n                \n                d1[arr[i]].append(i)\n                \n            except:\n                \n                d1[arr[i]] = [i]\n                \n        count = 0\n            \n        for i in range(n):\n            \n            diff_sum = k-arr[i]\n            \n            if diff_sum in d1.keys():\n                \n                for j in d1[diff_sum]:\n                    \n                    if j>i:\n                        \n                        count+=1\n                        \n        return count\n            \n            \n\n\n\n\n\n#{ \n # Driver Code Starts\n#Initial Template for Python 3\n\nif __name__ == '__main__':\n    tc = int(input())\n    while tc > 0:\n        n, k = list(map(int, input().strip().split()))\n        arr = list(map(int, input().strip().split()))\n        ob = Solution()\n        ans = ob.getPairsCount(arr, n, k)\n        print(ans)\n        tc -= 1\n\n# } Driver Code Ends","question":"<div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array&nbsp;of <strong>N</strong> integers, and an integer&nbsp;<strong>K</strong>, find the number of pairs of elements&nbsp;in the array whose sum is equal to <strong>K</strong>.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 6\narr[] = {1,&nbsp;5,&nbsp;7, 1}\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \narr[0] + arr[1] = 1 + 5 = 6 \nand arr[1] + arr[3] = 5 + 1 = 6.\n</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 2\narr[] = {1, 1, 1, 1}\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>&nbsp;\nEach 1 will produce sum 2 with any 1.</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>getPairsCount()</strong>&nbsp;which takes&nbsp;<strong>arr[],</strong>&nbsp;<strong>n</strong>&nbsp;and&nbsp;<strong>k&nbsp;</strong>as input parameters and returns the number of pairs that have sum K.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)<br>\n<br>\n<strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>5</sup><br>\n1 &lt;= K &lt;= 10<sup>8</sup><br>\n1 &lt;= Arr[i] &lt;= 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n</div>","platform":"leetcode","difficulty":"Easy","tags":["Arrays","Hash","Data Structures"],"qlink":"https://leetcode.com/problems/Count-pairs-with-given-sum","githublink":"https://github.com/Bhuvaneswar26/AlgoPrep/tree/main/Count-pairs-with-given-sum"}}